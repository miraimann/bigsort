using System.Collections.Generic;

namespace Bigsort.Tests
{
    public partial class GrouperTests
    {
        // ReSharper disable once InconsistentNaming
        public static IEnumerable<TestCase> Cases_00_19
        {
            get
            {
                yield return new TestCase("00", new[]
                {
                    "111.ab~~~~~~~~~",
                    "111.aa~~~~~~~~~~~~~~~~~",
                    "111.aa~~~~~~",
                    "111.ab-------------",
                    "111.aa----------------------------",
                    "111.aa--------------------"
                });

                yield return new TestCase("01", new[]
                {
                    "111.aa~~~~~~~~~",
                    "111.aa~~~~~~~~~~~~~~~~~",
                    "111.aa~~~~~~",
                    "111.aa-------------",
                    "111.aa----------------------------",
                    "111.aa--------------------"
                });

                yield return new TestCase("02", new[]
                {
                    "1.aa~~~~~~~~~",
                    "11111111.ab-------------",
                    "111111.aa--------------------",
                    "111111.ab--------------------",
                    "111111.aa~~~~~~",
                    "1.ab~~~~~~~~~",
                    "111.aa~~~~~~~~~~~~~~~~~",
                    "111.ab~~~~~~~~~~~~~~~~~",
                    "11111.aa----------------------------",
                    "111111.ab~~~~~~",
                    "11111111.aa-------------",
                    "11111.ab----------------------------",
                });

                yield return new TestCase("03", new[]
                {
                    "1.aa~~~~~~~~~",
                    "11111111.ab-------------",
                });

                yield return new TestCase("04", new[]
                {
                    "1.aa~~~~~~~~~",
                });
                
                yield return new TestCase("05", new[]
                {
                    "0."
                });

                yield return new TestCase("06", new[]
                {
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                    "0.", "0.", "0.", "0.", "0.", "0.", "0.",
                });

                yield return new TestCase("07", new[]
                {
                    "0.a", "0.", "0.", "0.ba", "0.", "0.ac", "0.b",
                    "0.", "0.a", "0.aa", "0.", "0.ac", "0.ac", "0.",
                    "0.ad", "0.", "0.a", "0.ab", "0.", "0.", "0.ac",
                    "0.", "0.aa", "0.", "0.", "0.", "0.", "0.ac",
                    "0.ac", "0.", "0.a", "0.ba", "0.", "0.", "0.b",
                    "0.", "0.", "0.", "0.ba", "0.ad", "0.x", "0.",
                    "0.", "0.aa", "0.xxx", "0.a", "0.", "0.", "0.ca",
                    "0.ac", "0.a", "0.xxxxx", "0.ad", "0.b", "0.", "0.ca",
                    "0.", "0.", "0.", "0.xxxx", "0.a", "0.b", "0.b",
                    "0.ad", "0.", "0.", "0.bb", "0.", "0.a", "0.",
                    "0.ad", "0.a", "0.a", "0.", "0.bc", "0.b", "0.",
                    "0.", "0.ad", "0.ad", "0.ad", "0.bd", "0.b", "0.",
                });

                yield return new TestCase("08", new[]
                {
                    "0.a", "0.", "8.", "324.ba", "0.", "0.ac", "0.b",
                    "0.", "0.a", "8.aa", "423432.", "0.ac", "0.ac", "0.",
                    "1.ad", "0.", "8.a", "423432.ab", "0.", "0.", "0.ac",
                    "2.", "546.aa", "0.", "423.", "432.", "0.", "0.ac",
                    "3.ac", "0.", "8.a", "32432.ba", "56.", "0.", "0.b",
                    "4.", "0.", "0.", "0.ba", "0.ad", "0.x", "0.",
                    "5.", "0.aa", "0.xxx", "0.a", "56.", "0.", "0.ca",
                    "54.ac", "0.a", "0.xxxxx", "0.ad", "0.b", "0.", "0.ca",
                    "876.", "0.", "0.", "0.xxxx", "54654.a", "0.b", "0.b",
                    "0.ad", "58685.", "0.", "0.bb", "0.", "0.a", "0.",
                    "0.ad", "0.a", "8.a", "0.", "0.bc", "8.b", "0.",
                    "0.", "0.ad", "65756.ad", "0.ad", "0.bd", "0.b", "0.",
                });

                yield return new TestCase("09", new[]
                {
                    "0.a", "0.", "0.", "0.ba-------", "0.", "0.ac----", "0.b",
                    "0.", "0.a", "0.aa--------", "0.", "0.ac----", "0.ac---", "0.",
                    "0.ad-----------", "0.", "0.a", "0.ab------", "0.", "0.", "0.ac-----",
                    "0.", "0.aa-------", "0.", "0.", "0.", "0.", "0.ac--",
                    "0.ac", "0.", "0.a", "0.ba----", "0.", "0.", "0.b",
                    "0.", "0.", "0.", "0.ba-----", "0.ad----", "0.x", "0.",
                    "0.", "0.aa", "0.xxx", "0.a", "0.", "0.", "0.ca--------",
                    "0.ac", "0.a", "0.xxxxx", "0.ad---", "0.b", "0.", "0.ca--------",
                    "0.", "0.", "0.", "0.xxxx", "0.a", "0.b", "0.b",
                    "0.ad", "0.", "0.", "0.bb----", "0.", "0.a", "0.",
                    "0.ad", "0.a", "0.a", "0.", "0.bc", "0.b", "0.",
                    "0.", "0.ad", "0.ad", "0.ad-----", "0.bd---", "0.b", "0.",
                });

                yield return new TestCase("10", new[]
                {
                    "0.a", "0.", "8.", "324.baitwyeiu", "0.", "0.ac", "0.b",
                    "0.", "0.a", "8.aagsdfhdff", "423432.", "0.ac", "0.ac", "0.",
                    "1.ad", "0.", "8.a", "423432.abyrei", "0.", "0.", "0.acfgdshdghnvcb",
                    "2.", "546.aafgsdf", "0.", "423.", "432.", "0.", "0.ac",
                    "3.ac", "0.", "8.a", "32432.ba", "56.", "0.", "0.b",
                    "4.", "0.", "0.", "0.ba", "0.ad", "0.x", "0.",
                    "5.", "0.aaaaaaaaa", "0.xxx", "0.a", "56.", "0.", "0.ca",
                    "54.ac", "0.a", "0.xxxxxafdf", "0.adaaaaa", "0.b", "0.", "0.caacacaca",
                    "876.", "0.", "0.", "0.xxxx", "54654.a", "0.b", "0.b",
                    "0.ad", "58685.", "0.", "0.bbcaca", "0.", "0.a", "0.",
                    "0.ad", "0.a", "8.a", "0.", "0.bc", "8.b", "0.",
                    "0.", "0.ad", "65756.adaaaa", "0.adaaa", "0.bdtrytreyt", "0.b", "0.",
                });

                yield return new TestCase("11", new[]
                {
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                    "0.a", "0.a", "0.a", "0.a", "0.a", "0.a", "0.a",
                });
                
                yield return new TestCase("12", new[]
                {
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                    "0.a", "0.b", "222222.b", "0.a", "0.c", "222222.", "0.a",
                });

                yield return new TestCase("13", new[]
                {
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.bc-----", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.bc", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "0.aaaaaaaa", "0.b", "222222.bc-----", "0.abbbbbb", "0.c", "222222.", "0.a",
                });


                yield return new TestCase("14", new[]
                {
                    "13.aaaaaaaa", "0.b", "222222.b", "0.abbbb", "0.c", "222222.", "0.affff",
                    "13.abaaaaaa", "0.ba", "222222.b", "0.abbbb", "0.c", "222222.", "0.a",
                    "13.acaaaaaa", "0.baaa", "222222.b", "0.abbbb", "0.c", "222222.", "0.affff",
                    "13.adaaaaaa", "0.baa", "222222.b", "0.abbbb", "0.ceeeee", "222222.", "0.affff",
                    "13.aeaaaaaa", "0.bb", "222222.b", "0.abbbb", "0.c", "222222.", "0.a",
                    "13.agaaaaaa", "0.b", "222222.b", "0.abbb", "0.c", "222222.", "0.a",
                    "13.ahaaaaaa", "0.bbbb", "222222.b", "0.ab", "0.cfffff", "222222.", "0.afff",
                    "13.aaaaaaaa", "0.bbbb", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.affff",
                    "13.abaaaaaa", "0.bcb", "222222.b", "0.abbbbbb", "0.c", "222222.", "0.a",
                    "13.acaaaaaa", "0.b", "222222.b", "0.abbbb", "0.c", "222222.", "0.a",
                    "13.adaaaaaa", "0.bcc", "222222.b", "0.abbbb", "0.c", "222222.", "0.afffff",
                    "13.aeaaaaaa", "0.bcb", "222222.b", "0.abbbb", "0.c", "222222.", "0.af",
                });
            }
        }
    }
}
